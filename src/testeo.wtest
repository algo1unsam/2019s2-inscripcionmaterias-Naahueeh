import estudiantes.*
import materias.*

describe "test"{

	var elementosDeProgramacion= new Materia()
	var matematica = new Materia()
	var objetosI = new Materia()
	var objetosII = new Materia()
	var libretaJuancito = new LibretaDeEstudiante()
	var juancito = new Estudiante()
	var programacion = new Carrera()
	
	fixture{
		
		juancito.asignarLibreta(libretaJuancito)
		juancito.carreras().add(programacion)
		programacion.agregarMaterias([elementosDeProgramacion,matematica,objetosI,objetosII])
		objetosII.correlativas().add(matematica)
		objetosII.correlativas().add(objetosI)
		elementosDeProgramacion.tipoPrerequisito(ningunPrerequisito)
		objetosII.tipoPrerequisito(tieneCorrelativas)
	}
	
	test "Un alumno se intenta inscribir a una materia que ya curs√≥, se rechaza." {

		elementosDeProgramacion.cupos(20)
		juancito.inscribirA(elementosDeProgramacion)
		juancito.agregarAprobadaLa(elementosDeProgramacion, 5)
		
		
		assert.throwsException({juancito.inscribirA(elementosDeProgramacion)})

	}
	
	test "Un alumno se intenta inscribir a una materia pero le falta una correlativa, se rechaza."{
		juancito.agregarAprobadaLa(matematica, 5)
		objetosII.cupos(20)
		assert.throwsException({juancito.inscribirA(objetosII)})
	}
	
	test "Alumno quiere inscribirse a la materia y cumple los requisitos pero no hay cupo. Usar criterio por orden de llegada y el alumno queda en lista de espera."{
		juancito.agregarAprobadaLa(matematica, 5)
		juancito.agregarAprobadaLa(objetosI, 5)
		objetosII.cupos(0)
		juancito.inscribirA(objetosII)
		assert.notThat(juancito.materiasInscriptas().contains(objetosII))
		assert.equals(1,objetosII.listaDeEspera().size())
		assert.equals(juancito,objetosII.listaDeEspera().first())
	}
	
}
